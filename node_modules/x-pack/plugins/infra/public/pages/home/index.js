"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
var _a;
"use strict";
const react_1 = tslib_1.__importDefault(require("react"));
const react_2 = require("@kbn/i18n/react");
const page_content_1 = require("./page_content");
const toolbar_1 = require("./toolbar");
const empty_page_1 = require("../../components/empty_page");
const header_1 = require("../../components/header");
const page_1 = require("../../components/page");
const beta_badge_header_section_1 = require("../../components/beta_badge_header_section");
const with_waffle_filters_1 = require("../../containers/waffle/with_waffle_filters");
const with_waffle_options_1 = require("../../containers/waffle/with_waffle_options");
const with_waffle_time_1 = require("../../containers/waffle/with_waffle_time");
const with_kibana_chrome_1 = require("../../containers/with_kibana_chrome");
const with_source_1 = require("../../containers/with_source");
exports.HomePage = react_2.injectI18n((_a = class extends react_1.default.Component {
        render() {
            const { intl } = this.props;
            return (react_1.default.createElement(page_1.ColumnarPage, null,
                react_1.default.createElement(header_1.Header, { appendSections: react_1.default.createElement(beta_badge_header_section_1.InfrastructureBetaBadgeHeaderSection, null) }),
                react_1.default.createElement(with_source_1.WithSource, null, ({ derivedIndexPattern, hasFailed, isLoading, lastFailureMessage, load, metricIndicesExist, }) => metricIndicesExist ? (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(with_waffle_time_1.WithWaffleTimeUrlState, null),
                    react_1.default.createElement(with_waffle_filters_1.WithWaffleFilterUrlState, { indexPattern: derivedIndexPattern }),
                    react_1.default.createElement(with_waffle_options_1.WithWaffleOptionsUrlState, null),
                    react_1.default.createElement(toolbar_1.HomeToolbar, null),
                    react_1.default.createElement(page_content_1.HomePageContent, null))) : isLoading ? (react_1.default.createElement(with_source_1.SourceLoadingPage, null)) : hasFailed ? (react_1.default.createElement(with_source_1.SourceErrorPage, { errorMessage: lastFailureMessage || '', retry: load })) : (react_1.default.createElement(with_kibana_chrome_1.WithKibanaChrome, null, ({ basePath }) => (react_1.default.createElement(empty_page_1.EmptyPage, { title: intl.formatMessage({
                        id: 'xpack.infra.homePage.noMetricsIndicesTitle',
                        defaultMessage: "Looks like you don't have any metrics indices.",
                    }), message: intl.formatMessage({
                        id: 'xpack.infra.homePage.noMetricsIndicesDescription',
                        defaultMessage: "Let's add some!",
                    }), actionLabel: intl.formatMessage({
                        id: 'xpack.infra.homePage.noMetricsIndicesActionLabel',
                        defaultMessage: 'Setup Instructions',
                    }), actionUrl: `${basePath}/app/kibana#/home/tutorial_directory/metrics`, "data-test-subj": "noMetricsIndicesPrompt" })))))));
        }
    },
    _a.displayName = 'HomePage',
    _a));
