'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.esdocs = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*
opyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
or more contributor license agreements. Licensed under the Elastic License;
you may not use this file except in compliance with the Elastic License.


var _squel = require('squel');

var _squel2 = _interopRequireDefault(_squel);

var _query_es_sql = require('../../../../server/lib/query_es_sql');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var esdocs = exports.esdocs = function esdocs() {
  return {
    name: 'esdocs',
    type: 'datatable',
    help: 'Query elasticsearch and get back raw documents. We recommend you specify the fields you want, ' + 'especially if you are going to ask for a lot of rows',
    context: {
      types: ['filter']
    },
    args: {
      index: {
        types: ['string', 'null'],
        default: '_all',
        help: 'Specify an index pattern. Eg "logstash-*"'
      },
      query: {
        types: ['string'],
        aliases: ['_', 'q'],
        help: 'A Lucene query string',
        default: '-_index:.kibana'
      },
      sort: {
        types: ['string', 'null'],
        help: 'Sort directions as "field, direction". Eg "@timestamp, desc" or "bytes, asc"'
      },
      fields: {
        help: 'Comma separated list of fields. Fewer fields will perform better',
        types: ['string', 'null']
      },
      metaFields: {
        help: 'Comma separated list of meta fields, eg "_index,_type"',
        types: ['string', 'null']
      },
      count: {
        types: ['number'],
        default: 100,
        help: 'The number of docs to pull back. Smaller numbers perform better'
      }
    },
    fn: function fn(context, args, handlers) {
      context.and = context.and.concat([{
        type: 'luceneQueryString',
        query: args.query
      }]);

      var query = _squel2.default.select({
        autoQuoteTableNames: true,
        autoQuoteFieldNames: true,
        autoQuoteAliasNames: true,
        nameQuoteCharacter: '"'
      }).from(args.index.toLowerCase());

      if (args.fields) {
        var fields = args.fields.split(',').map(function (field) {
          return field.trim();
        });
        fields.forEach(function (field) {
          return query = query.field(field);
        });
      }

      if (args.sort) {
        var _args$sort$split$map = args.sort.split(',').map(function (str) {
          return str.trim();
        }),
            _args$sort$split$map2 = _slicedToArray(_args$sort$split$map, 2),
            sortField = _args$sort$split$map2[0],
            sortOrder = _args$sort$split$map2[1];

        if (sortField) {
          query.order('"' + sortField + '"', sortOrder.toLowerCase() === 'asc');
        }
      }

      return (0, _query_es_sql.queryEsSQL)(handlers.elasticsearchClient, {
        count: args.count,
        query: query.toString(),
        filter: context.and
      });
    }
  };
};