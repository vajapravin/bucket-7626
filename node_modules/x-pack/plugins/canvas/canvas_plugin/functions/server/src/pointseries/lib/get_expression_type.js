'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /*
                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                               */

exports.getExpressionType = getExpressionType;

var _tinymath = require('tinymath');

var _get_field_type = require('../../../../../../common/lib/get_field_type');

var _is_column_reference = require('./is_column_reference');

var _get_field_names = require('./get_field_names');

function getExpressionType(columns, mathExpression) {
  // if isColumnReference returns true, then mathExpression is just a string
  // referencing a column in a datatable
  if ((0, _is_column_reference.isColumnReference)(mathExpression)) {
    return (0, _get_field_type.getFieldType)(columns, mathExpression);
  }

  var parsedMath = (0, _tinymath.parse)(mathExpression);

  if (parsedMath.args) {
    var fieldNames = parsedMath.args.reduce(_get_field_names.getFieldNames, []);

    if (fieldNames.length > 0) {
      var fieldTypes = fieldNames.reduce(function (types, name) {
        var type = (0, _get_field_type.getFieldType)(columns, name);
        if (type !== 'null' && types.indexOf(type) === -1) {
          return types.concat(type);
        }

        return types;
      }, []);

      return fieldTypes.length === 1 ? fieldTypes[0] : 'string';
    }
    return 'number';
  }

  return typeof parsedMath === 'undefined' ? 'undefined' : _typeof(parsedMath);
}