'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asFn = undefined;

var _common = require('@kbn/interpreter/common');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                   */

var asFn = exports.asFn = function asFn() {
  return {
    name: 'as',
    type: 'datatable',
    context: {
      types: ['string', 'boolean', 'number', 'null']
    },
    help: 'Creates a datatable with a single value',
    args: {
      name: {
        types: ['string'],
        aliases: ['_'],
        help: 'A name to give the column',
        default: 'value'
      }
    },
    fn: function fn(context, args) {
      return {
        type: 'datatable',
        columns: [{
          name: args.name,
          type: (0, _common.getType)(context)
        }],
        rows: [_defineProperty({}, args.name, context)]
      };
    }
  };
};