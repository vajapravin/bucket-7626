'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.columns = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                   */

var _lodash = require('lodash');

var columns = exports.columns = function columns() {
  return {
    name: 'columns',
    type: 'datatable',
    help: 'Include or exclude columns from a data table. If you specify both, this will exclude first',
    context: {
      types: ['datatable']
    },
    args: {
      include: {
        types: ['string'],
        help: 'A comma separated list of column names to keep in the table',
        default: null
      },
      exclude: {
        types: ['string'],
        help: 'A comma separated list of column names to remove from the table',
        default: null
      }
    },
    fn: function fn(context, args) {
      var include = args.include,
          exclude = args.exclude;


      var result = _extends({}, context);

      if (exclude) {
        var fields = exclude.split(',').map(function (field) {
          return field.trim();
        });
        var _columns = result.columns.filter(function (col) {
          return !fields.includes(col.name);
        });
        var rows = _columns.length > 0 ? result.rows.map(function (row) {
          return (0, _lodash.omit)(row, fields);
        }) : [];

        result = _extends({}, result, { rows: rows, columns: _columns });
      }

      if (include) {
        var _fields = include.split(',').map(function (field) {
          return field.trim();
        });
        //const columns = result.columns.filter(col => fields.includes(col.name));
        // Include columns in the order the user specified
        var _columns2 = [];
        _fields.forEach(function (field) {
          var column = (0, _lodash.find)(result.columns, { name: field });
          if (column) {
            _columns2.push(column);
          }
        });
        var _rows = _columns2.length > 0 ? result.rows.map(function (row) {
          return (0, _lodash.pick)(row, _fields);
        }) : [];
        result = _extends({}, result, { rows: _rows, columns: _columns2 });
      }

      return result;
    }
  };
};