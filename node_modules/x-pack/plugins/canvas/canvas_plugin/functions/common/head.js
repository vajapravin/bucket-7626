'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.head = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                   */

var _lodash = require('lodash');

var head = exports.head = function head() {
  return {
    name: 'head',
    aliases: [],
    type: 'datatable',
    help: 'Get the first N rows from the datatable. Also see `tail`',
    context: {
      types: ['datatable']
    },
    args: {
      count: {
        aliases: ['_'],
        types: ['number'],
        help: 'Return this many rows from the beginning of the datatable',
        default: 1
      }
    },
    fn: function fn(context, args) {
      return _extends({}, context, {
        rows: (0, _lodash.take)(context.rows, args.count)
      });
    }
  };
};