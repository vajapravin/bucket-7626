'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csv = undefined;

var _papaparse = require('papaparse');

var _papaparse2 = _interopRequireDefault(_papaparse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = exports.csv = function csv() {
  return {
    name: 'csv',
    type: 'datatable',
    context: {
      types: ['null']
    },
    args: {
      data: {
        aliases: ['_'],
        types: ['string'],
        help: 'CSV data to use'
      },
      delimiter: {
        types: ['string'],
        help: 'Data separation character'
      },
      newline: {
        types: ['string'],
        help: 'Row separation character'
      }
    },
    help: 'Create datatable from csv input',
    fn: function fn(context, args) {
      var csvString = args.data,
          delimiter = args.delimiter,
          newline = args.newline;


      var config = {
        transform: function transform(val) {
          if (val.indexOf('"') >= 0) {
            var trimmed = val.trim();
            return trimmed.replace(/(^\"|\"$)/g, '');
          }
          return val;
        }
      };

      if (delimiter != null) {
        config.delimiter = delimiter;
      }
      if (newline != null) {
        config.newline = newline;
      }

      // TODO: handle errors, check output.errors
      var output = _papaparse2.default.parse(csvString, config);

      // output.data is an array of arrays, rows and values in each row
      return output.data.reduce(function (acc, row, i) {
        if (i === 0) {
          // first row, assume header values
          row.forEach(function (colName) {
            return acc.columns.push({ name: colName.trim(), type: 'string' });
          });
        } else {
          // any other row is a data row
          var rowObj = row.reduce(function (rowAcc, colValue, j) {
            var colName = acc.columns[j].name;
            rowAcc[colName] = colValue;
            return rowAcc;
          }, {});

          acc.rows.push(rowObj);
        }

        return acc;
      }, {
        type: 'datatable',
        columns: [],
        rows: []
      });
    }
  };
}; /*
    * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
    * or more contributor license agreements. Licensed under the Elastic License;
    * you may not use this file except in compliance with the Elastic License.
    */