'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

var switchFn = exports.switchFn = function switchFn() {
  return {
    name: 'switch',
    help: 'Perform conditional logic with multiple conditions',
    args: {
      case: {
        types: ['case'],
        aliases: ['_'],
        resolve: false,
        multi: true,
        help: 'The list of conditions to check'
      },
      default: {
        aliases: ['finally'],
        resolve: false,
        help: 'The default case if no cases match'
      }
    },
    fn: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, args) {
        var cases, i, _ref2, matches, result;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cases = args.case || [];
                i = 0;

              case 2:
                if (!(i < cases.length)) {
                  _context.next = 13;
                  break;
                }

                _context.next = 5;
                return cases[i]();

              case 5:
                _ref2 = _context.sent;
                matches = _ref2.matches;
                result = _ref2.result;

                if (!matches) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt('return', result);

              case 10:
                i++;
                _context.next = 2;
                break;

              case 13:
                if (!(typeof args.default !== 'undefined')) {
                  _context.next = 17;
                  break;
                }

                _context.next = 16;
                return args.default();

              case 16:
                return _context.abrupt('return', _context.sent);

              case 17:
                return _context.abrupt('return', context);

              case 18:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      function fn(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return fn;
    }()
  };
};