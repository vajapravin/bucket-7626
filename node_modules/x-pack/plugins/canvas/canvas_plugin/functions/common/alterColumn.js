'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alterColumn = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                   */

var _lodash = require('lodash');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var alterColumn = exports.alterColumn = function alterColumn() {
  return {
    name: 'alterColumn',
    type: 'datatable',
    help: 'Converts between core types, eg string, number, null, boolean, date and rename columns',
    context: {
      types: ['datatable']
    },
    args: {
      column: {
        aliases: ['_'],
        types: ['string'],
        help: 'The name of the column to alter'
      },
      type: {
        types: ['string'],
        help: 'The type to convert the column to. Leave blank to not change type',
        default: null,
        options: ['null', 'boolean', 'number', 'string']
      },
      name: {
        types: ['string'],
        help: 'The resultant column name. Leave blank to not rename',
        default: null
      }
    },
    fn: function fn(context, args) {
      if (!args.column || !args.type && !args.name) {
        return context;
      }

      var column = context.columns.find(function (col) {
        return col.name === args.column;
      });
      if (!column) {
        throw new Error('Column not found: \'' + args.column + '\'');
      }

      var name = args.name || column.name;
      var type = args.type || column.type;

      var columns = context.columns.reduce(function (all, col) {
        if (col.name !== args.name) {
          if (col.name !== column.name) {
            all.push(col);
          } else {
            all.push({ name: name, type: type });
          }
        }
        return all;
      }, []);

      var handler = function handler(val) {
        return val;
      };

      if (args.type) {
        handler = function getHandler() {
          switch (type) {
            case 'string':
              if (column.type === 'date') {
                return function (v) {
                  return new Date(v).toISOString();
                };
              }
              return String;
            case 'number':
              return Number;
            case 'date':
              return function (v) {
                return new Date(v).valueOf();
              };
            case 'boolean':
              return Boolean;
            case 'null':
              return function () {
                return null;
              };
            default:
              throw new Error('Cannot convert to \'' + type + '\'');
          }
        }();
      }

      var rows = context.rows.map(function (row) {
        return _extends({}, (0, _lodash.omit)(row, column.name), _defineProperty({}, name, handler(row[column.name])));
      });

      return {
        type: 'datatable',
        columns: columns,
        rows: rows
      };
    }
  };
};