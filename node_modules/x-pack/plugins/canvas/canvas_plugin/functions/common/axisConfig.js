'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisConfig = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                   */

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var axisConfig = exports.axisConfig = function axisConfig() {
  return {
    name: 'axisConfig',
    aliases: [],
    type: 'axisConfig',
    context: {
      types: ['datatable']
    },
    help: 'Configure axis of a visualization',
    args: {
      show: {
        types: ['boolean'],
        help: 'Show the axis labels?',
        default: true
      },
      position: {
        types: ['string'],
        help: 'Position of the axis labels - top, bottom, left, and right',
        options: ['top', 'bottom', 'left', 'right'],
        default: ''
      },
      min: {
        types: ['number', 'date', 'string', 'null'],
        help: 'Minimum value displayed in the axis. Must be a number or a date in ms or ISO8601 string'
      },
      max: {
        types: ['number', 'date', 'string', 'null'],
        help: 'Maximum value displayed in the axis. Must be a number or a date in ms or ISO8601 string'
      },
      tickSize: {
        types: ['number', 'null'],
        help: 'Increment size between each tick. Use for number axes only'
      }
    },
    fn: function fn(context, args) {
      var positions = ['top', 'bottom', 'left', 'right', ''];
      if (!positions.includes(args.position)) {
        throw new Error('Invalid position: \'' + args.position + '\'');
      }

      var min = typeof args.min === 'string' ? _moment2.default.utc(args.min).valueOf() : args.min;
      var max = typeof args.max === 'string' ? _moment2.default.utc(args.max).valueOf() : args.max;

      if (min != null && isNaN(min)) {
        throw new Error('Invalid date string: \'' + args.min + '\'. \'min\' must be a number, date in ms, or ISO8601 date string');
      }
      if (max != null && isNaN(max)) {
        throw new Error('Invalid date string: \'' + args.max + '\'. \'max\' must be a number, date in ms, or ISO8601 date string');
      }

      return _extends({
        type: 'axisConfig'
      }, args, {
        min: min,
        max: max
      });
    }
  };
};