'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.staticColumn = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                   */

var _common = require('@kbn/interpreter/common');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var staticColumn = exports.staticColumn = function staticColumn() {
  return {
    name: 'staticColumn',
    type: 'datatable',
    help: 'Add a column with a static value',
    context: {
      types: ['datatable']
    },
    args: {
      name: {
        types: ['string'],
        aliases: ['_', 'column'],
        help: 'The name of the new column column',
        required: true
      },
      value: {
        types: ['string', 'number', 'boolean', 'null'],
        help: 'The value to insert in each column. Tip: use a sub-expression to rollup other columns into a static value',
        default: null
      }
    },
    fn: function fn(context, args) {
      var rows = context.rows.map(function (row) {
        return _extends({}, row, _defineProperty({}, args.name, args.value));
      });
      var type = (0, _common.getType)(rows[0][args.name]);
      var columns = [].concat(_toConsumableArray(context.columns));
      var existingColumnIndex = columns.findIndex(function (_ref) {
        var name = _ref.name;
        return name === args.name;
      });
      var newColumn = { name: args.name, type: type };

      if (existingColumnIndex > -1) {
        columns[existingColumnIndex] = newColumn;
      } else {
        columns.push(newColumn);
      }

      return {
        type: 'datatable',
        columns: columns,
        rows: rows
      };
    }
  };
};