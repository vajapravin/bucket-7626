'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pie = undefined;

var _lodash = require('lodash.keyby');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash');

var _get_colors_from_palette = require('../../../common/lib/get_colors_from_palette');

var _get_legend_config = require('../../../common/lib/get_legend_config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

var pie = exports.pie = function pie() {
  return {
    name: 'pie',
    aliases: [],
    type: 'render',
    help: 'Configure a pie chart element',
    context: {
      types: ['pointseries']
    },
    args: {
      palette: {
        types: ['palette', 'null'],
        help: 'A palette object for describing the colors to use on this pie',
        default: '{palette}'
      },
      seriesStyle: {
        multi: true,
        types: ['seriesStyle', 'null'],
        help: 'A style of a specific series'
      },
      radius: {
        type: ['string', 'number'],
        help: 'Radius of the pie as a percentage (between 0 and 1) of the available space. Set to \'auto\' to automatically set radius',
        default: 'auto'
      },
      hole: {
        types: ['number'],
        default: 0,
        help: 'Draw a hole in the pie, 0-100, as a percentage of the pie radius'
      },
      labels: {
        types: ['boolean'],
        default: true,
        help: 'Show pie labels',
        options: [true, false]
      },
      labelRadius: {
        types: ['number'],
        default: 100,
        help: 'Percentage of area of container to use as radius for the label circle'
      },
      font: {
        types: ['style'],
        help: 'Label font',
        default: '{font}'
      },
      legend: {
        types: ['string', 'boolean'],
        help: 'Legend position, nw, sw, ne, se or false',
        default: false,
        options: ['nw', 'sw', 'ne', 'se', false]
      },
      tilt: {
        types: ['number'],
        default: 1,
        help: 'Percentage of tilt where 1 is fully vertical and 0 is completely flat'
      }
    },
    fn: function fn(context, args) {
      var seriesStyles = (0, _lodash2.default)(args.seriesStyle || [], 'label') || {};

      var data = (0, _lodash3.map)((0, _lodash3.groupBy)(context.rows, 'color'), function (series, label) {
        var item = {
          label: label,
          data: series.map(function (point) {
            return point.size || 1;
          })
        };

        var seriesStyle = seriesStyles[label];

        // append series style, if there is a match
        if (seriesStyle) {
          item.color = (0, _lodash3.get)(seriesStyle, 'color');
        }

        return item;
      });

      return {
        type: 'render',
        as: 'pie',
        value: {
          font: args.font,
          data: data,
          options: {
            canvas: false,
            colors: (0, _get_colors_from_palette.getColorsFromPalette)(args.palette, data.length),
            legend: (0, _get_legend_config.getLegendConfig)(args.legend, data.length),
            grid: {
              show: false
            },
            series: {
              pie: {
                show: true,
                innerRadius: Math.max(args.hole, 0) / 100,
                stroke: {
                  width: 0
                },
                label: {
                  show: args.labels,
                  radius: (args.labelRadius >= 0 ? args.labelRadius : 100) / 100
                },
                tilt: args.tilt,
                radius: args.radius
              },
              bubbles: {
                show: false
              },
              shadowSize: 0
            }
          }
        }
      };
    }
  };
};