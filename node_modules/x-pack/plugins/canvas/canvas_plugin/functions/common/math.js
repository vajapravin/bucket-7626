'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.math = undefined;

var _tinymath = require('tinymath');

var _pivot_object_array = require('../../../common/lib/pivot_object_array');

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

var math = exports.math = function math() {
  return {
    name: 'math',
    type: 'number',
    help: 'Interpret a math expression, with a number or datatable as context. Datatable columns are available by their column name. ' + 'If you pass in a number it is available as "value" (without the quotes)',
    context: {
      types: ['number', 'datatable']
    },
    args: {
      expression: {
        aliases: ['_'],
        types: ['string'],
        help: 'An evaluated TinyMath expression. (See [TinyMath Functions](https://www.elastic.co/guide/en/kibana/current/canvas-tinymath-functions.html))'
      }
    },
    fn: function fn(context, args) {
      if (!args.expression || args.expression.trim() === '') {
        throw new Error('Empty expression');
      }

      var isDatatable = context && context.type === 'datatable';
      var mathContext = isDatatable ? (0, _pivot_object_array.pivotObjectArray)(context.rows, context.columns.map(function (col) {
        return col.name;
      })) : { value: context };
      try {
        var result = (0, _tinymath.evaluate)(args.expression, mathContext);
        if (Array.isArray(result)) {
          if (result.length === 1) {
            return result[0];
          }
          throw new Error('Expressions must return a single number. Try wrapping your expression in mean() or sum()');
        }
        if (isNaN(result)) {
          throw new Error('Failed to execute math expression. Check your column names');
        }
        return result;
      } catch (e) {
        if (context.rows.length === 0) {
          throw new Error('Empty datatable');
        } else {
          throw e;
        }
      }
    }
  };
};