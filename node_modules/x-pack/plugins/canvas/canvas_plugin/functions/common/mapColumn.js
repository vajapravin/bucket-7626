'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapColumn = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _common = require('@kbn/interpreter/common');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*
                                                                                                                                                                                                     * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                     * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                     * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                     */

var mapColumn = exports.mapColumn = function mapColumn() {
  return {
    name: 'mapColumn',
    aliases: ['mc'], // midnight commander. So many times I've launched midnight commander instead of moving a file.
    type: 'datatable',
    help: 'Add a column calculated as the result of other columns, or not',
    context: {
      types: ['datatable']
    },
    args: {
      name: {
        types: ['string'],
        aliases: ['_', 'column'],
        help: 'The name of the resulting column',
        required: true
      },
      expression: {
        types: ['boolean', 'number', 'string', 'null'],
        resolve: false,
        aliases: ['exp', 'fn'],
        help: 'A canvas expression which will be passed each row as a single row datatable'
      }
    },
    fn: function fn(context, args) {
      args.expression = args.expression || function () {
        return Promise.resolve(null);
      };

      var columns = [].concat(_toConsumableArray(context.columns));
      var rowPromises = context.rows.map(function (row) {
        return args.expression({
          type: 'datatable',
          columns: columns,
          rows: [row]
        }).then(function (val) {
          return _extends({}, row, _defineProperty({}, args.name, val));
        });
      });

      return Promise.all(rowPromises).then(function (rows) {
        var existingColumnIndex = columns.findIndex(function (_ref) {
          var name = _ref.name;
          return name === args.name;
        });
        var type = (0, _common.getType)(rows[0][args.name]);
        var newColumn = { name: args.name, type: type };
        if (existingColumnIndex === -1) {
          columns.push(newColumn);
        } else {
          columns[existingColumnIndex] = newColumn;
        }

        return {
          type: 'datatable',
          columns: columns,
          rows: rows
        };
      });
    }
  };
};