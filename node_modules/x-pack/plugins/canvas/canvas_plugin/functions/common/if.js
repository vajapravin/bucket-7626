'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

var ifFn = exports.ifFn = function ifFn() {
  return {
    name: 'if',
    help: 'Perform conditional logic',
    args: {
      condition: {
        types: ['boolean', 'null'],
        aliases: ['_'],
        help: 'A boolean true or false, usually returned by a subexpression. If this is not supplied then the input context will be used'
      },
      then: {
        resolve: false,
        help: 'The return value if true'
      },
      else: {
        resolve: false,
        help: 'The return value if false. If else is not specified, and the condition is false' + 'then the input context to the function will be returned'
      }
    },
    fn: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, args) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!args.condition) {
                  _context.next = 8;
                  break;
                }

                if (!(typeof args.then === 'undefined')) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt('return', context);

              case 3:
                _context.next = 5;
                return args.then();

              case 5:
                return _context.abrupt('return', _context.sent);

              case 8:
                if (!(typeof args.else === 'undefined')) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt('return', context);

              case 10:
                _context.next = 12;
                return args.else();

              case 12:
                return _context.abrupt('return', _context.sent);

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      function fn(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return fn;
    }()
  };
};