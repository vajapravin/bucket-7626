'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plot = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                   * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                   * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                   */

var _lodash = require('lodash.keyby');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash');

var _get_colors_from_palette = require('../../../../common/lib/get_colors_from_palette');

var _get_legend_config = require('../../../../common/lib/get_legend_config');

var _get_flot_axis_config = require('./get_flot_axis_config');

var _get_font_spec = require('./get_font_spec');

var _series_style_to_flot = require('./series_style_to_flot');

var _get_tick_hash = require('./get_tick_hash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var plot = exports.plot = function plot() {
  return {
    name: 'plot',
    aliases: [],
    type: 'render',
    help: 'Configure a plot element',
    context: {
      types: ['pointseries']
    },
    args: {
      seriesStyle: {
        multi: true,
        types: ['seriesStyle', 'null'],
        help: 'A style of a specific series'
      },
      defaultStyle: {
        multi: false,
        types: ['seriesStyle'],
        help: 'The default style to use for every series',
        default: '{seriesStyle points=5}'
      },
      palette: {
        types: ['palette'],
        help: 'A palette object for describing the colors to use on this plot',
        default: '{palette}'
      },
      font: {
        types: ['style'],
        help: 'Legend and tick mark fonts',
        default: '{font}'
      },
      legend: {
        types: ['string', 'boolean'],
        help: 'Legend position, nw, sw, ne, se or false',
        default: 'ne',
        options: ['nw', 'sw', 'ne', 'se', false]
      },
      yaxis: {
        types: ['boolean', 'axisConfig'],
        help: 'Axis configuration, or false to disable',
        default: true
      },
      xaxis: {
        types: ['boolean', 'axisConfig'],
        help: 'Axis configuration, or false to disable',
        default: true
      }
    },
    fn: function fn(context, args) {
      var seriesStyles = (0, _lodash2.default)(args.seriesStyle || [], 'label') || {};
      var sortedRows = (0, _lodash3.sortBy)(context.rows, ['x', 'y', 'color', 'size', 'text']);
      var ticks = (0, _get_tick_hash.getTickHash)(context.columns, sortedRows);
      var font = args.font ? (0, _get_font_spec.getFontSpec)(args.font) : {};

      var data = (0, _lodash3.map)((0, _lodash3.groupBy)(sortedRows, 'color'), function (series, label) {
        var seriesStyle = _extends({}, args.defaultStyle, seriesStyles[label]);
        var flotStyle = seriesStyle ? (0, _series_style_to_flot.seriesStyleToFlot)(seriesStyle) : {};

        return _extends({}, flotStyle, {
          label: label,
          data: series.map(function (point) {
            var attrs = {};
            var x = (0, _lodash3.get)(context.columns, 'x.type') === 'string' ? ticks.x.hash[point.x] : point.x;
            var y = (0, _lodash3.get)(context.columns, 'y.type') === 'string' ? ticks.y.hash[point.y] : point.y;

            if (point.size != null) {
              attrs.size = point.size;
            } else if ((0, _lodash3.get)(seriesStyle, 'points')) {
              attrs.size = seriesStyle.points;
              (0, _lodash3.set)(flotStyle, 'bubbles.size.min', seriesStyle.points);
            }

            if (point.text != null) {
              attrs.text = point.text;
            }

            return [x, y, attrs];
          })
        });
      });

      var gridConfig = {
        borderWidth: 0,
        borderColor: null,
        color: 'rgba(0,0,0,0)',
        labelMargin: 30,
        margin: {
          right: 30,
          top: 20,
          bottom: 0,
          left: 0
        }
      };

      var result = {
        type: 'render',
        as: 'plot',
        value: {
          font: args.font,
          data: (0, _lodash3.sortBy)(data, 'label'),
          options: {
            canvas: false,
            colors: (0, _get_colors_from_palette.getColorsFromPalette)(args.palette, data.length),
            legend: (0, _get_legend_config.getLegendConfig)(args.legend, data.length),
            grid: gridConfig,
            xaxis: (0, _get_flot_axis_config.getFlotAxisConfig)('x', args.xaxis, {
              columns: context.columns,
              ticks: ticks,
              font: font
            }),
            yaxis: (0, _get_flot_axis_config.getFlotAxisConfig)('y', args.yaxis, {
              columns: context.columns,
              ticks: ticks,
              font: font
            }),
            series: _extends({
              shadowSize: 0
            }, (0, _series_style_to_flot.seriesStyleToFlot)(args.defaultStyle))
          }
        }
      };

      // fix the issue of plot sometimes re-rendering with an empty chart
      // TODO: holy hell, why does this work?! the working theory is that some values become undefined
      // and serializing the result here causes them to be dropped off, and this makes flot react differently.
      // It's also possible that something else ends up mutating this object, but that seems less likely.
      return JSON.parse(JSON.stringify(result));
    }
  };
};