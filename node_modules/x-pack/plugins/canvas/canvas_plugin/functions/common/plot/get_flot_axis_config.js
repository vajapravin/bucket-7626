'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFlotAxisConfig = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /*
                                                                                                                                                                                                                                                                               * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
                                                                                                                                                                                                                                                                               * or more contributor license agreements. Licensed under the Elastic License;
                                                                                                                                                                                                                                                                               * you may not use this file except in compliance with the Elastic License.
                                                                                                                                                                                                                                                                               */

var _lodash = require('lodash');

var _common = require('@kbn/interpreter/common');

var getFlotAxisConfig = exports.getFlotAxisConfig = function getFlotAxisConfig(axis, argValue) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      columns = _ref.columns,
      ticks = _ref.ticks,
      font = _ref.font;

  if (!argValue || argValue.show === false) {
    return { show: false };
  }

  var config = { show: true };
  var axisType = (0, _lodash.get)(columns, axis + '.type');

  if ((0, _common.getType)(argValue) === 'axisConfig') {
    var position = argValue.position,
        min = argValue.min,
        max = argValue.max,
        tickSize = argValue.tickSize;
    // first value is used as the default

    var acceptedPositions = axis === 'x' ? ['bottom', 'top'] : ['left', 'right'];

    config.position = acceptedPositions.includes(position) ? position : acceptedPositions[0];

    if (axisType === 'number' || axisType === 'date') {
      if (min) {
        config.min = min;
      }
      if (max) {
        config.max = max;
      }
    }

    if (tickSize && axisType === 'number') {
      config.tickSize = tickSize;
    }
  }

  if (axisType === 'string') {
    config.ticks = (0, _lodash.map)(ticks[axis].hash, function (position, name) {
      return [position, name];
    });
  }

  if (axisType === 'date') {
    config.mode = 'time';
  }

  if ((typeof font === 'undefined' ? 'undefined' : _typeof(font)) === 'object') {
    config.font = font;
  }

  return config;
};