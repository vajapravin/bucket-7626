'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

var filterrows = exports.filterrows = function filterrows() {
  return {
    name: 'filterrows',
    aliases: [],
    type: 'datatable',
    context: {
      types: ['datatable']
    },
    help: 'Filter rows in a datatable based on the return value of a subexpression.',
    args: {
      fn: {
        resolve: false,
        aliases: ['_'],
        types: ['boolean'],
        help: 'An expression to pass each rows in the datatable into. The expression should return a boolean. ' + 'A true value will preserve the row, and a false value will remove it.'
      }
    },
    fn: function fn(context, _ref) {
      var fn = _ref.fn;

      var checks = context.rows.map(function (row) {
        return fn(_extends({}, context, {
          rows: [row]
        }));
      });

      return Promise.all(checks).then(function (results) {
        return context.rows.filter(function (row, i) {
          return results[i];
        });
      }).then(function (rows) {
        return _extends({}, context, {
          rows: rows
        });
      });
    }
  };
};