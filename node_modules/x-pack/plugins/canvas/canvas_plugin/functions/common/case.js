'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var doesMatch = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(context, args) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof args.if !== 'undefined')) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt('return', args.if);

          case 2:
            if (!(typeof args.when !== 'undefined')) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return args.when();

          case 5:
            _context2.t0 = _context2.sent;
            _context2.t1 = context;
            return _context2.abrupt('return', _context2.t0 === _context2.t1);

          case 8:
            return _context2.abrupt('return', true);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function doesMatch(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var getResult = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(context, args) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(typeof args.then !== 'undefined')) {
              _context3.next = 4;
              break;
            }

            _context3.next = 3;
            return args.then();

          case 3:
            return _context3.abrupt('return', _context3.sent);

          case 4:
            return _context3.abrupt('return', context);

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getResult(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

var caseFn = exports.caseFn = function caseFn() {
  return {
    name: 'case',
    type: 'case',
    help: 'Build a case (including a condition/result) to pass to the switch function',
    args: {
      when: {
        aliases: ['_'],
        resolve: false,
        help: 'This value is compared to the context to see if the condition is met. It is overridden by the "if" argument if both are provided.'
      },
      if: {
        types: ['boolean'],
        help: 'This value is used as whether or not the condition is met. It overrides the unnamed argument if both are provided.'
      },
      then: {
        resolve: false,
        help: 'The value to return if the condition is met'
      }
    },
    fn: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(context, args) {
        var matches, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return doesMatch(context, args);

              case 2:
                matches = _context.sent;

                if (!matches) {
                  _context.next = 9;
                  break;
                }

                _context.next = 6;
                return getResult(context, args);

              case 6:
                _context.t0 = _context.sent;
                _context.next = 10;
                break;

              case 9:
                _context.t0 = null;

              case 10:
                result = _context.t0;
                return _context.abrupt('return', { type: 'case', matches: matches, result: result });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }));

      function fn(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return fn;
    }()
  };
};