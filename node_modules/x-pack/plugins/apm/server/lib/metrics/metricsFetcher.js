"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../../common/constants");
const get_bucket_size_1 = require("../helpers/get_bucket_size");
async function fetchMetrics({ serviceName, setup, timeseriesBucketAggregations = {}, totalAggregations = {}, bool = {} }) {
    const { start, end, esFilterQuery, client, config } = setup;
    const { intervalString } = get_bucket_size_1.getBucketSize(start, end, 'auto');
    const filters = [
        { term: { [constants_1.SERVICE_NAME]: serviceName } },
        {
            term: {
                [constants_1.PROCESSOR_NAME]: 'metric'
            }
        },
        {
            range: {
                '@timestamp': { gte: start, lte: end, format: 'epoch_millis' }
            }
        }
    ];
    if (esFilterQuery) {
        filters.push(esFilterQuery);
    }
    const params = {
        index: config.get('apm_oss.metricsIndices'),
        body: {
            size: 0,
            query: {
                bool: {
                    ...bool,
                    filter: filters
                }
            },
            aggs: {
                timeseriesData: {
                    date_histogram: {
                        field: '@timestamp',
                        interval: intervalString,
                        min_doc_count: 0,
                        extended_bounds: { min: start, max: end }
                    },
                    aggs: timeseriesBucketAggregations
                },
                ...totalAggregations
            }
        }
    };
    return client('search', params);
}
exports.fetchMetrics = fetchMetrics;
