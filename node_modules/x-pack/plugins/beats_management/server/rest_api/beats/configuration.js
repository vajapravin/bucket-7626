"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const joi_1 = tslib_1.__importDefault(require("joi"));
const lodash_1 = require("lodash");
const error_wrappers_1 = require("../../utils/error_wrappers");
exports.createGetBeatConfigurationRoute = (libs) => ({
    method: 'GET',
    path: '/api/beats/agent/{beatId}/configuration',
    config: {
        validate: {
            headers: joi_1.default.object({
                'kbn-beats-access-token': joi_1.default.string().required(),
            }).options({ allowUnknown: true }),
            query: joi_1.default.object({
                validSetting: joi_1.default.boolean().default(true),
            }),
        },
        auth: false,
    },
    handler: async (request, h) => {
        const beatId = request.params.beatId;
        const accessToken = request.headers['kbn-beats-access-token'];
        let beat;
        let tags;
        try {
            beat = await libs.beats.getById(libs.framework.internalUser, beatId);
            if (beat === null) {
                return h.response({ message: `Beat "${beatId}" not found` }).code(404);
            }
            const isAccessTokenValid = beat.access_token === accessToken;
            if (!isAccessTokenValid) {
                return h.response({ message: 'Invalid access token' }).code(401);
            }
            let newStatus = 'OK';
            if (!request.query.validSetting) {
                newStatus = 'ERROR';
            }
            await libs.beats.update(libs.framework.internalUser, beat.id, {
                config_status: newStatus,
                last_checkin: new Date(),
            });
            tags = await libs.tags.getTagsWithIds(libs.framework.internalUser, beat.tags || []);
        }
        catch (err) {
            return error_wrappers_1.wrapEsError(err);
        }
        const configurationBlocks = tags.reduce((blocks, tag) => {
            blocks = blocks.concat(tag.configuration_blocks.reduce((acc, block) => {
                acc.push({
                    ...lodash_1.omit(block, ['configs']),
                    config: block.configs[0],
                });
                return acc;
            }, []));
            return blocks;
        }, []);
        return {
            configuration_blocks: configurationBlocks,
        };
    },
});
