"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const joi_1 = tslib_1.__importDefault(require("joi"));
const lodash_1 = require("lodash");
const constants_1 = require("../../../common/constants");
const error_wrappers_1 = require("../../utils/error_wrappers");
// TODO: write to Kibana audit log file
exports.createSetTagRoute = (libs) => ({
    method: 'PUT',
    path: '/api/beats/tag/{tag}',
    licenseRequired: constants_1.REQUIRED_LICENSES,
    requiredRoles: ['beats_admin'],
    config: {
        validate: {
            params: joi_1.default.object({
                tag: joi_1.default.string(),
            }),
            payload: joi_1.default.object({
                color: joi_1.default.string(),
                configuration_blocks: joi_1.default.array().items(joi_1.default.object({
                    configs: joi_1.default.array()
                        .items(joi_1.default.object())
                        .required(),
                    description: joi_1.default.string().allow(''),
                    type: joi_1.default.string()
                        .only(lodash_1.values(constants_1.ConfigurationBlockTypes))
                        .required(),
                })),
            }).allow(null),
        },
    },
    handler: async (request, h) => {
        const defaultConfig = { configuration_blocks: [], color: '#DD0A73' };
        const config = lodash_1.get(request, 'payload', defaultConfig) || defaultConfig;
        try {
            const { isValid, result } = await libs.tags.saveTag(request.user, request.params.tag, config);
            if (!isValid) {
                return h.response({ result, success: false }).code(400);
            }
            return h.response({ success: true }).code(result === 'created' ? 201 : 200);
        }
        catch (err) {
            // TODO move this to kibana route thing in adapter
            return error_wrappers_1.wrapEsError(err);
        }
    },
});
