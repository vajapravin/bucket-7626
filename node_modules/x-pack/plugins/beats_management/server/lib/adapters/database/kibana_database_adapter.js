"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
const index_names_1 = require("../../../../common/constants/index_names");
const index_templates_1 = require("../../../utils/index_templates");
const adapter_types_1 = require("./../framework/adapter_types");
class KibanaDatabaseAdapter {
    constructor(kbnElasticSearch) {
        this.es = kbnElasticSearch.getCluster('admin');
    }
    async get(user, params) {
        const result = await this.callWithUser(user, 'get', params);
        return result;
        // todo
    }
    async mget(user, params) {
        const result = await this.callWithUser(user, 'mget', params);
        return result;
        // todo
    }
    async bulk(user, params) {
        await this.putTemplate();
        const result = await this.callWithUser(user, 'bulk', params);
        return result;
    }
    async create(user, params) {
        await this.putTemplate();
        const result = await this.callWithUser(user, 'create', params);
        return result;
    }
    async index(user, params) {
        await this.putTemplate();
        const result = await this.callWithUser(user, 'index', params);
        return result;
    }
    async delete(user, params) {
        const result = await this.callWithUser(user, 'delete', params);
        return result;
    }
    async search(user, params) {
        const result = await this.callWithUser(user, 'search', params);
        return result;
    }
    // TODO move beats template name and body out of this bridge
    async putTemplate() {
        const result = await this.callWithUser({ kind: 'internal' }, 'indices.putTemplate', {
            name: index_names_1.INDEX_NAMES.BEATS,
            body: index_templates_1.beatsIndexTemplate,
        });
        return result;
    }
    callWithUser(user, esMethod, options = {}) {
        if (user.kind === 'authenticated') {
            return this.es.callWithRequest({
                headers: user[adapter_types_1.internalAuthData],
            }, esMethod, options);
        }
        else if (user.kind === 'internal') {
            return this.es.callWithInternalUser(esMethod, options);
        }
        else {
            throw new Error('Invalid user type');
        }
    }
}
exports.KibanaDatabaseAdapter = KibanaDatabaseAdapter;
