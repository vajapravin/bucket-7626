"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const react_1 = require("@kbn/i18n/react");
const react_2 = tslib_1.__importDefault(require("react"));
const config_schemas_translations_map_1 = require("../../../config_schemas_translations_map");
const config_form_1 = require("./config_form");
class ConfigViewUi extends react_2.default.Component {
    constructor(props) {
        super(props);
        this.form = react_2.default.createRef();
        this.supportedConfigs = config_schemas_translations_map_1.getSupportedConfig();
        this.onValueChange = (field) => (e) => {
            const value = e.currentTarget ? e.currentTarget.value : e;
            this.setState((state) => ({
                configBlock: {
                    ...state.configBlock,
                    [field]: value,
                },
            }));
        };
        this.editMode = props.configBlock !== undefined;
        this.state = {
            valid: false,
            configBlock: props.configBlock || {
                type: this.supportedConfigs[0].value,
            },
        };
    }
    render() {
        const { intl } = this.props;
        return (react_2.default.createElement(eui_1.EuiFlyout, { onClose: this.props.onClose },
            react_2.default.createElement(eui_1.EuiFlyoutHeader, null,
                react_2.default.createElement(eui_1.EuiTitle, { size: "m" },
                    react_2.default.createElement("h2", null, this.editMode ? (this.props.onSave ? (react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.editConfigurationTitle", defaultMessage: "Edit configuration block" })) : (react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.viewConfigurationTitle", defaultMessage: "View configuration block" }))) : (react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.addConfigurationTitle", defaultMessage: "Add configuration block" }))))),
            react_2.default.createElement(eui_1.EuiFlyoutBody, null,
                react_2.default.createElement(eui_1.EuiFormRow, { label: react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.typeLabel", defaultMessage: "Type" }) },
                    react_2.default.createElement(eui_1.EuiSelect, { options: this.supportedConfigs, value: this.state.configBlock.type, disabled: this.editMode, onChange: this.onValueChange('type') })),
                react_2.default.createElement(eui_1.EuiFormRow, { label: react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.descriptionLabel", defaultMessage: "Description" }) },
                    react_2.default.createElement(eui_1.EuiFieldText, { value: this.state.configBlock.description, disabled: !this.props.onSave, onChange: this.onValueChange('description'), placeholder: intl.formatMessage({
                            id: 'xpack.beatsManagement.tagConfig.descriptionPlaceholder',
                            defaultMessage: 'Description (optional)',
                        }) })),
                react_2.default.createElement("h3", null,
                    react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.configurationTypeText", defaultMessage: "{configType} configuration", values: {
                            configType: this.supportedConfigs.find(config => this.state.configBlock.type === config.value).text,
                        } })),
                react_2.default.createElement(eui_1.EuiHorizontalRule, null),
                react_2.default.createElement(config_form_1.ConfigForm, { onSubmit: this.props.onSave
                        ? data => {
                            if (this.props.onSave) {
                                this.props.onSave({
                                    ...this.state.configBlock,
                                    configs: [data],
                                });
                            }
                            this.props.onClose();
                        }
                        : undefined, canSubmit: canIt => this.setState({ valid: canIt }), ref: this.form, values: this.state.configBlock, id: this.supportedConfigs.find(config => this.state.configBlock.type === config.value).value, schema: this.supportedConfigs.find(config => this.state.configBlock.type === config.value).config })),
            react_2.default.createElement(eui_1.EuiFlyoutFooter, null,
                react_2.default.createElement(eui_1.EuiFlexGroup, { justifyContent: "spaceBetween" },
                    react_2.default.createElement(eui_1.EuiFlexItem, { grow: false },
                        react_2.default.createElement(eui_1.EuiButtonEmpty, { iconType: "cross", onClick: this.props.onClose },
                            react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.closeButtonLabel", defaultMessage: "Close" }))),
                    this.props.onSave && (react_2.default.createElement(eui_1.EuiFlexItem, { grow: false },
                        react_2.default.createElement(eui_1.EuiButton, { disabled: !this.state.valid, fill: true, onClick: () => {
                                if (this.form.current && this.form.current.getWrappedInstance()) {
                                    this.form.current.getWrappedInstance().submit();
                                }
                            } },
                            react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tagConfig.saveButtonLabel", defaultMessage: "Save" }))))))));
    }
}
exports.ConfigView = react_1.injectI18n(ConfigViewUi);
