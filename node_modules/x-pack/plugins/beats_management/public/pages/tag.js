"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const eui_theme_k6_light_json_1 = tslib_1.__importDefault(require("@elastic/eui/dist/eui_theme_k6_light.json"));
const react_1 = require("@kbn/i18n/react");
require("brace/mode/yaml");
require("brace/theme/github");
const lodash_1 = require("lodash");
const react_2 = tslib_1.__importDefault(require("react"));
const constants_1 = require("x-pack/plugins/beats_management/common/constants");
const primary_1 = require("../components/layouts/primary");
const tag_1 = require("../components/tag");
class TagPageComponent extends react_2.default.PureComponent {
    constructor(props) {
        super(props);
        this.mode = 'create';
        this.loadTag = async () => {
            const tags = await this.props.libs.tags.getTagsWithIds([this.props.match.params.tagid]);
            if (tags.length === 0) {
                // TODO do something to error https://github.com/elastic/kibana/issues/26023
            }
            this.setState({
                tag: tags[0],
            });
        };
        this.loadAttachedBeats = async () => {
            const beats = await this.props.libs.beats.getBeatsWithTag(this.props.match.params.tagid);
            this.setState({
                attachedBeats: beats,
            });
        };
        this.saveTag = async () => {
            await this.props.containers.tags.upsertTag(this.state.tag);
            this.props.goTo(`/overview/configuration_tags`);
        };
        this.getNumExclusiveConfigurationBlocks = () => this.state.tag.configuration_blocks
            .map(({ type }) => constants_1.UNIQUENESS_ENFORCING_TYPES.some(uniqueType => uniqueType === type))
            .reduce((acc, cur) => (cur ? acc + 1 : acc), 0);
        const randomColor = lodash_1.sample(Object.keys(eui_theme_k6_light_json_1.default)
            .filter(key => key.startsWith('euiColorVis'))
            .map(key => eui_theme_k6_light_json_1.default[key]));
        this.state = {
            showFlyout: false,
            attachedBeats: null,
            tag: {
                id: props.match.params.action === 'create' ? '' : props.match.params.tagid,
                color: this.rgb2hex(randomColor),
                configuration_blocks: [],
                last_updated: new Date(),
            },
        };
        if (props.match.params.action !== 'create') {
            this.mode = 'edit';
            this.loadTag();
            this.loadAttachedBeats();
        }
    }
    render() {
        const { intl } = this.props;
        return (react_2.default.createElement(primary_1.PrimaryLayout, { title: this.mode === 'create'
                ? intl.formatMessage({
                    id: 'xpack.beatsManagement.tag.createTagTitle',
                    defaultMessage: 'Create Tag',
                })
                : intl.formatMessage({
                    id: 'xpack.beatsManagement.tag.updateTagTitle',
                    defaultMessage: 'Update Tag: {tagId}',
                }, {
                    tagId: this.state.tag.id,
                }) },
            react_2.default.createElement("div", null,
                react_2.default.createElement(tag_1.TagEdit, { tag: this.state.tag, onDetachBeat: this.mode === 'edit'
                        ? async (beatIds) => {
                            await this.props.containers.beats.removeTagsFromBeats(beatIds, this.state.tag.id);
                            await this.loadAttachedBeats();
                        }
                        : undefined, onTagChange: (field, value) => this.setState(oldState => ({
                        tag: { ...oldState.tag, [field]: value },
                    })), attachedBeats: this.state.attachedBeats }),
                react_2.default.createElement(eui_1.EuiSpacer, { size: "m" }),
                react_2.default.createElement(eui_1.EuiFlexGroup, null,
                    react_2.default.createElement(eui_1.EuiFlexItem, { grow: false },
                        react_2.default.createElement(eui_1.EuiButton, { fill: true, disabled: this.state.tag.id.search(/^[a-zA-Z0-9-]+$/) === -1 ||
                                this.state.tag.id === '' ||
                                this.getNumExclusiveConfigurationBlocks() > 1 // || this.state.tag.configuration_blocks.length === 0
                            , onClick: this.saveTag },
                            react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tag.saveButtonLabel", defaultMessage: "Save" }))),
                    react_2.default.createElement(eui_1.EuiFlexItem, { grow: false },
                        react_2.default.createElement(eui_1.EuiButtonEmpty, { onClick: () => this.props.goTo('/overview/configuration_tags') },
                            react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.beatsManagement.tag.cancelButtonLabel", defaultMessage: "Cancel" })))))));
    }
    rgb2hex(rgb) {
        const matchedrgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
        return matchedrgb && matchedrgb.length === 4
            ? '#' +
                ('0' + parseInt(matchedrgb[1], 10).toString(16)).slice(-2) +
                ('0' + parseInt(matchedrgb[2], 10).toString(16)).slice(-2) +
                ('0' + parseInt(matchedrgb[3], 10).toString(16)).slice(-2)
            : '';
    }
}
exports.TagPage = react_1.injectI18n(TagPageComponent);
