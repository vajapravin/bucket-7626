"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
class BeatsLib {
    constructor(adapter, libs) {
        this.adapter = adapter;
        this.libs = libs;
        /** Get a single beat using the token it was enrolled in for lookup */
        this.getBeatWithToken = async (enrollmentToken) => {
            const beat = await this.adapter.getBeatWithToken(enrollmentToken);
            return beat;
        };
        /** Get an array of beats that have a given tag id assigned to it */
        this.getBeatsWithTag = async (tagId) => {
            const beats = await this.adapter.getBeatsWithTag(tagId);
            return await this.mergeInTags(beats);
        };
        // FIXME: This needs to be paginated https://github.com/elastic/kibana/issues/26022
        /** Get an array of all enrolled beats. */
        this.getAll = async (ESQuery) => {
            const beats = await this.adapter.getAll(ESQuery);
            return await this.mergeInTags(beats);
        };
        /** Update a given beat via it's ID */
        this.update = async (id, beatData) => {
            return await this.adapter.update(id, beatData);
        };
        /** unassign tags from beats using an array of tags and beats */
        this.removeTagsFromBeats = async (removals) => {
            return await this.adapter.removeTagsFromBeats(removals);
        };
        /** assign tags from beats using an array of tags and beats */
        this.assignTagsToBeats = async (assignments) => {
            return await this.adapter.assignTagsToBeats(assignments);
        };
        /** method user to join tags to beats, thus fully populating the beats */
        this.mergeInTags = async (beats) => {
            const tagIds = lodash_1.flatten(beats.map(b => b.tags || []));
            const tags = await this.libs.tags.getTagsWithIds(tagIds);
            // TODO the filter should not be needed, if the data gets into a bad state, we should error
            // and inform the user they need to delete the tag, or else we should auto delete it
            // https://github.com/elastic/kibana/issues/26021
            const mergedBeats = beats.map(b => ({
                ...b,
                full_tags: (b.tags || []).map(tagId => tags.find(t => t.id === tagId)).filter(t => t),
            }));
            return mergedBeats;
        };
    }
    /** Get a single beat using it's ID for lookup */
    async get(id) {
        const beat = await this.adapter.get(id);
        return beat ? (await this.mergeInTags([beat]))[0] : null;
    }
}
exports.BeatsLib = BeatsLib;
