"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
var _a;
"use strict";
const react_1 = require("@kbn/i18n/react");
const react_2 = tslib_1.__importDefault(require("react"));
const page_content_1 = require("./page_content");
const toolbar_1 = require("./toolbar");
const empty_page_1 = require("../../components/empty_page");
const header_1 = require("../../components/header");
const page_1 = require("../../components/page");
const beta_badge_header_section_1 = require("../../components/beta_badge_header_section");
const with_log_filter_1 = require("../../containers/logs/with_log_filter");
const with_log_minimap_1 = require("../../containers/logs/with_log_minimap");
const with_log_position_1 = require("../../containers/logs/with_log_position");
const with_log_textview_1 = require("../../containers/logs/with_log_textview");
const with_kibana_chrome_1 = require("../../containers/with_kibana_chrome");
const with_source_1 = require("../../containers/with_source");
exports.LogsPage = react_1.injectI18n((_a = class extends react_2.default.Component {
        render() {
            const { intl } = this.props;
            return (react_2.default.createElement(page_1.ColumnarPage, null,
                react_2.default.createElement(header_1.Header, { appendSections: react_2.default.createElement(beta_badge_header_section_1.LogsBetaBadgeHeaderSection, null), breadcrumbs: [
                        {
                            text: intl.formatMessage({
                                id: 'xpack.infra.logsPage.logsBreadcrumbsText',
                                defaultMessage: 'Logs',
                            }),
                        },
                    ] }),
                react_2.default.createElement(with_source_1.WithSource, null, ({ derivedIndexPattern, hasFailed, isLoading, lastFailureMessage, load, logIndicesExist, }) => logIndicesExist ? (react_2.default.createElement(react_2.default.Fragment, null,
                    react_2.default.createElement(with_log_filter_1.WithLogFilterUrlState, { indexPattern: derivedIndexPattern }),
                    react_2.default.createElement(with_log_position_1.WithLogPositionUrlState, null),
                    react_2.default.createElement(with_log_minimap_1.WithLogMinimapUrlState, null),
                    react_2.default.createElement(with_log_textview_1.WithLogTextviewUrlState, null),
                    react_2.default.createElement(toolbar_1.LogsToolbar, null),
                    react_2.default.createElement(page_content_1.LogsPageContent, null))) : isLoading ? (react_2.default.createElement(with_source_1.SourceLoadingPage, null)) : hasFailed ? (react_2.default.createElement(with_source_1.SourceErrorPage, { errorMessage: lastFailureMessage || '', retry: load })) : (react_2.default.createElement(with_kibana_chrome_1.WithKibanaChrome, null, ({ basePath }) => (react_2.default.createElement(empty_page_1.EmptyPage, { title: intl.formatMessage({
                        id: 'xpack.infra.logsPage.noLoggingIndicesTitle',
                        defaultMessage: "Looks like you don't have any logging indices.",
                    }), message: intl.formatMessage({
                        id: 'xpack.infra.logsPage.noLoggingIndicesDescription',
                        defaultMessage: "Let's add some!",
                    }), actionLabel: intl.formatMessage({
                        id: 'xpack.infra.logsPage.noLoggingIndicesActionLabel',
                        defaultMessage: 'Setup Instructions',
                    }), actionUrl: `${basePath}/app/kibana#/home/tutorial_directory/logging` })))))));
        }
    },
    _a.displayName = 'LogsPage',
    _a));
